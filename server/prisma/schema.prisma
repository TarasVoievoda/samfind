generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  active
  inactive
}

enum UserAuthType {
  email
  google
}

enum UserRole {
  admin
  customer
}

enum UserAccountType {
  private
  business
}

model User {
  id                        String           @id @default(uuid())
  email                     String           @unique
  password                  String           @db.VarChar
  firstName                 String           @db.VarChar
  lastName                  String           @db.VarChar
  authType                  UserAuthType
  refreshToken              String?          @db.VarChar
  status                    UserStatus
  role                      UserRole
  isVerified                Boolean          @default(false)
  isDeleted                 Boolean          @default(false)
  registrationCode          String?
  registrationCodeExpiresAt DateTime?
  resetCode                 String?          @db.VarChar
  resetCodeExpiresAt        DateTime?
  emailResetCode            String?          @db.VarChar
  emailResetCodeExpiresAt   DateTime?
  discount                  Float            @default(0)
  discountPercent           Float            @default(0)
  referralCode              Float            @unique
  invitedReferralCode       Float?           @unique
  accountType               UserAccountType  @default(private)
  organizationId            String?
  licenseId                 String?
  stripeCustomerId          String?          @unique
  createdAt                 DateTime         @default(now())
  organization              Organization?    @relation(fields: [organizationId], references: [id])
  UserReferral              UserReferral[]
  License                   License[]
  activeLicenses            ActiveLicense[]
  subscription              Subscription?
  discounts                 Discount[]
  discountsIncomes          DiscountIncome[]

  @@map("user")
}

enum LicenseStatus {
  active
  inactive
}

enum LicenseTierType {
  freemium
  standard
}

model License {
  id               String          @id @default(uuid())
  user             User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  status           LicenseStatus   @default(active)
  ownerId          String          @unique
  activeLicenses   ActiveLicense[]
  limit            Float           @default(0)
  tierType         LicenseTierType @default(freemium)
  availableEmails  String[]        @default([])
  licenseExpiresAt DateTime        @default(now())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  subscription     Subscription?

  @@map("license")
}

model ActiveLicense {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  
  license   License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  licenseId String
  desktopId String?
  mobileId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("active_license")
}

model UserReferral {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  invitedUserIds String[] @default([])
  referralCode   Float    @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String   @unique

  @@map("user_referral")
}

model Organization {
  id                         String   @id @default(uuid())
  name                       String
  domains                    String[] @default([])
  VAT                        String
  businessOrganizationNumber String
  User                       User[]
  ownerId                    String   @unique
  userIds                    String[] @default([])
  availableEmails            String[] @default([])

  @@map("organization")
}

enum PlanPeriod {
  monthly
  yearly
}

model Plan {
  id              String         @id @default(uuid())
  type            LicenseTierType
  period          PlanPeriod
  price           Float
  stripeProductId String?
  stripePriceId   String?
  subscription    Subscription[]

  @@map("plan")
}

model Subscription {
  id               String   @id @default(uuid())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String   
  license          License?  @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  licenseId        String?   @unique
  plan             Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId           String   @unique
  isActive         Boolean
  isInTrial        Boolean
  stripeInvoiceIds String[] @default([])
  nextDate         DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("subscription")
}

model Discount {
  id               String           @id @default(uuid())
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String           
  startAmount      Float            @default(0)
  endAmount        Float            @default(0)
  used             Boolean          @default(false)
  stripeCouponId   String?          
  discountsIncomes DiscountIncome[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("discount")
}

model DiscountIncome {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  discount    Discount @relation(fields: [discountId], references: [id])
  discountId  String
  amount      Float    @default(0)
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("discount_income")
}
