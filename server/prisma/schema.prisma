generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  active
  inactive
}

enum UserAuthType {
  email
  google
}

enum UserRole {
  admin
  customer
}

enum UserAccountType {
  private
  business
}

model User {
  id                        String          @id @default(uuid())
  email                     String          @unique
  password                  String          @db.VarChar
  firstName                 String          @db.VarChar
  lastName                  String          @db.VarChar
  authType                  UserAuthType
  refreshToken              String?         @db.VarChar
  status                    UserStatus
  role                      UserRole
  isVerified                Boolean         @default(false)
  registrationCode          String?
  registrationCodeExpiresAt DateTime?
  resetCode                 String?         @db.VarChar
  resetCodeExpiresAt        DateTime?
  emailResetCode            String?         @db.VarChar
  emailResetCodeExpiresAt   DateTime?
  discount                  Float           @default(0)
  discountPercent           Float           @default(0)
  referralCode              Float           @unique
  invitedReferralCode       Float?          @unique
  accountType               UserAccountType @default(private)
  organizationId            String?
  licenseId                 String?
  organization              Organization?   @relation(fields: [organizationId], references: [id])
  UserReferral              UserReferral[]
  License                   License[]
  activeLicenses            ActiveLicense[]

  @@map("user")
}

enum LicenseStatus {
  active
  inactive
}

enum LicenseTierType {
  freemium
  standard
}

model License {
  id               String          @id @default(uuid())
  user             User            @relation(fields: [ownerId], references: [id])
  status           LicenseStatus   @default(active)
  ownerId          String          @unique
  activeLicenses   ActiveLicense[]
  limit            Float           @default(0)
  tierType         LicenseTierType @default(freemium)
  availableEmails  String[]        @default([])
  licenseExpiresAt DateTime        @default(now())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@map("license")
}

model ActiveLicense {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  license   License  @relation(fields: [licenseId], references: [id])
  licenseId String
  deviceId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("active_license")
}

model UserReferral {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  invitedUserIds String[] @default([])
  referralCode   Float    @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String   @unique

  @@map("user_referral")
}

model Organization {
  id                         String   @id @default(uuid())
  name                       String
  domains                    String[] @default([])
  VAT                        String
  businessOrganizationNumber String
  User                       User[]
  ownerId                    String   @unique
  userIds                    String[] @default([])
  availableEmails            String[] @default([])

  @@map("organization")
}

// model Plan {
//   id                         String   @id @default(uuid())
//   name                       String
//   stripeProductId            String
//   stripePriceId              String

//   @@map("plan")
// }

// model Subscription {
//   id                         String   @id @default(uuid())
//   name                       String
//   stripeSubscriptionId       String
//   stripeDiscountId           String

//   @@map("subscription")
// }

// model Discount {
//   id                         String   @id @default(uuid())
//   user                       User     @relation(fields: [userId], references: [id])
//   userId                     String          
//   amount                     Float    @default(0)  
//   name                       String
//   stripeSubscriptionId       String
//   stripeDiscountId           String

//   @@map("discount")
// }
